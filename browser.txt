Browser tests
=============

These are browser-driven tests for the functionality provided by the
``collective.dancing`` package.

Setup
-----

  >>> from Testing.ZopeTestCase import user_password
  >>> from Products.Five.testbrowser import Browser
  >>> browser = Browser()
  >>> browser.handleErrors = False
  >>> from collective.dancing.tests import setup_error_log
  >>> print_error = setup_error_log(portal)

We want messages to be printed out instead of sending them:

  >>> from zope import interface, component
  >>> import zope.sendmail.interfaces

  >>> class MyMailDelivery(object):
  ...     interface.implements(zope.sendmail.interfaces.IMailDelivery)
  ...
  ...     def send(self, from_, to, message):
  ...         print 'MyMailDelivery sending:'
  ...         print 'From: ', from_
  ...         print 'To: ', to
  ...         print 'Message follows:'
  ...         print message

  >>> component.provideUtility(MyMailDelivery())

Control panel
-------------

The ``collective.dancing`` package registers a control panel; we can
reach it as an administrator through the 'Site Setup' link:

  >>> browser.addHeader('Authorization',
  ...                   'Basic %s:%s' % ('portal_owner', user_password))
  >>> browser.open(portal.absolute_url())
  >>> browser.getLink('Site Setup').click()
  >>> browser.getLink('Newsletters').click()
  >>> browser.url
  'http://nohost/plone/portal_newsletters'
  >>> "Newsletter configuration" in browser.contents
  True

Channels administration
-----------------------

The admistration screen can be reached through Plone control panel:

  >>> browser.getLink('Newsletter channels administration').click()

Through this administration screen we can add and delete channels:

  >>> browser.getControl('Title').value = 'My channel'
  >>> browser.getControl('Add').click()
  >>> 'Item added successfully' in browser.contents
  True
  >>> 'My channel' in browser.contents
  True 
  >>> browser.getControl('Title').value = 'My other channel'
  >>> browser.getControl('Add').click()
  >>> 'Item added successfully' in browser.contents
  True

Let's delete the first of the two channels:

  >>> btn = browser.getControl(name='crud-edit.my-channel.widgets.select:list')
  >>> btn.value = ['selected']
  >>> browser.getControl(name='crud-edit.buttons.delete').click()
  >>> "Successfully deleted items" in browser.contents
  True
  >>> 'My channel' in browser.contents, 'My other channel' in browser.contents
  (False, True)

The default "Latest news" collector is already selected for our
channel:

  >>> collector = browser.getControl(
  ...     name='crud-edit.my-other-channel.widgets.collector:list')
  >>> collector.displayValue
  ['Latest news']

Configuring collectors
----------------------

We can click on "Latest news" to configure what items go into the
channel:

  >>> browser.getLink('Latest news').click()

Here, we'll find a link to the Smart Folder that's used to filter and
sort the items that go into the channel.  Thus, we click another time
to interact with the Smart Folder interface:

  >>> browser.getLink('edit the Smart Folder').click()

Let's say we wanted the channel to contain both News Items and Events.
We'll add to the selection the Events type and save:

  >>> types = browser.getControl(
  ...     name='crit__Type_ATPortalTypeCriterion_value:list')
  >>> types.value = ['News Item', 'Event']
  >>> browser.getControl(name='form.button.Save').click()
  >>> "Changes saved" in browser.contents
  True

Okay, so now we catch both events and news items throughout the site.
To see if that's true, we'll create two items, one for each type:

  >>> news = portal.news
  >>> workflow = portal.portal_workflow
  >>> self.loginAsPortalOwner()
  >>> news.invokeFactory(
  ...     'News Item', id='flu', title='Drug-resistant flu rising, says WHO')
  'flu'
  >>> workflow.doActionFor(news['flu'], 'publish')

  >>> events = portal.events
  >>> events.invokeFactory('Event', id='super-bowl', title='Super Bowl XLII')
  'super-bowl'
  >>> workflow.doActionFor(events['super-bowl'], 'publish')

We can now expect these two items to show up when we look at the
collector's Smart Folder's RSS view:

  >>> browser.open(browser.url.rsplit('/', 1)[0] + '/RSS')
  >>> 'Super Bowl XLII' in browser.contents, 'flu rising' in browser.contents
  (True, True)

For e-mail subscriptions to this channel, we'll allow subscribers to
choose which content types they're interested in; whether it's news
items, events, or both.  The default will be both.

We'll mark the "Portal Types Criterion" as restrictable by the
subscriber.  The collector edit form allows us to do this:

  >>> browser.goBack()
  >>> browser.getLink('Latest news').click()
  >>> criteria = browser.getControl("Select content types").click()
  >>> browser.getControl('Apply').click()
  >>> "Data successfully updated" in browser.contents
  True

Channel subscriptions
---------------------

Going back to the channel administration screen, we can click on the
channel's name to reach the channel subscriptions screen:

  >>> browser.open(portal.absolute_url() + '/portal_newsletters/channels')
  >>> browser.getLink('My other channel').click()

We can add new subscriptions here:

  >>> browser.getControl('E-mail address').value = u"daniel@localhost"
  >>> browser.getControl('Add').click()
  >>> 'Item added successfully' in browser.contents
  True
  >>> 'daniel@localhost' in browser.contents
  True

We'll add another subscription.  This one filters on the content type:

  >>> browser.getControl('E-mail address').value = u"mailman@localhost"
  >>> browser.getControl('News Item', index=1).click()
  >>> browser.getControl('Add').click()
  >>> 'Item added successfully' in browser.contents
  True

  >>> print browser.contents # doctest: +ELLIPSIS
  <!DOCTYPE...daniel@localhost...
  ...mailman@localhost...value="News Item" checked="checked" />...

Stats
-----

Also the statistics screens can be reached through the control panel:

  >>> browser.open('http://nohost/plone/portal_newsletters')
  >>> browser.getLink('Newsletter statistics').click()

We can see that our channel is listed here:

  >>> print browser.contents # doctest: +ELLIPSIS
  <!DOCTYPE...My other channel...0...0...0...0...0...

We can create a message now and see how the statistics reflect this.
First, let's get a hold of our subscription object:

  >>> channel = portal.portal_newsletters.channels.objectValues()[0]
  >>> subscription = channel.subscriptions.values()[0][0]
  >>> subscription # doctest: +ELLIPSIS
  <collective.singing.subscribe.SimpleSubscription object ...>

We can now queue a new message:

  >>> from collective.singing import message
  >>> message.Message(payload=u"Hello, World!", subscription=subscription) \
  ... # doctest: +ELLIPSIS
  <collective.singing.message.Message object ...>

Et voila:

  >>> browser.reload()
  >>> print browser.contents #doctest: +ELLIPSIS
  <!DOCTYPE...My other channel...0...1...0...0...0...

The statistics screen allows us to also send queued messages.  Right
now, noone knows how to send text messages like the one we just
created.  We'll register an adapter to do that for us:

  >>> import collective.singing.interfaces

  >>> class MyTextDispatch(object):
  ...     interface.implements(collective.singing.interfaces.IDispatch)
  ...     component.adapts(unicode)
  ... 
  ...     failure = False
  ... 
  ...     def __init__(self, message):
  ...         self.message = message
  ... 
  ...     def __call__(self):
  ...         if self.failure:
  ...             return u'error', self.failure
  ...         print "Sending %r" % self.message
  ...         return u'sent', None

  >>> component.provideAdapter(MyTextDispatch)

Now we can select our channel and click the "Send messages now" button:

  >>> btn = browser.getControl(
  ...     name='crud-edit.my-other-channel.widgets.select:list')
  >>> btn.value = ['selected']
  >>> browser.getControl('Send messages now').click()
  Sending u'Hello, World!'
  >>> "1 message(s) sent" in browser.contents
  True

If sending the message fails, we'll get notified:

  >>> message.Message(payload=u"Hello, Aliens!", subscription=subscription) \
  ... # doctest: +ELLIPSIS
  <collective.singing.message.Message object ...>

  >>> MyTextDispatch.failure = u'Sorry, failed'
  >>> btn = browser.getControl(
  ...     name='crud-edit.my-other-channel.widgets.select:list')
  >>> btn.value = ['selected']
  >>> browser.getControl('Send messages now').click()
  >>> "1 failure(s)" in browser.contents
  True
  >>> "0 message(s) sent" in browser.contents
  True

TODO
----

- Subscribe
- Send mails